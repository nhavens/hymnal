package edu.wheaton.hymnal.ui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.util.Observable;
import java.util.Observer;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.SwingConstants;

import edu.wheaton.hymnal.data.Db;
import edu.wheaton.hymnal.data.H2Db;
import edu.wheaton.hymnal.data.LilypondException;
import edu.wheaton.hymnal.data.LilypondWrapper;
import edu.wheaton.hymnal.data.Stanza;
import edu.wheaton.hymnal.data.Text;
import edu.wheaton.hymnal.data.Tune;

public class MusicPage extends JFrame implements Observer {
	private static final long serialVersionUID = 1L;

	private static final int WIDTH = 880;
	private static final int HEIGHT = 800;
	private static final Dimension PREFERRED_SIZE = new Dimension(WIDTH, HEIGHT);
	private static final int MIN_STANZAS_FOR_CHECKBOXES = 5;
	private static final String NEW_HYMN_BUTTON_TEXT = "New Hymn";
	private static final String ERROR_MESSAGE = "Error Rendering Music";
	/**
	 * filename for an animated gif to display while generating sheet music
	 */
	private static String LOADING_GIF_FILE = "loading.gif";
	private static final Db db = H2Db.getInstance();

	private Model model;
	private LilypondWrapper lw;

	private JPanel interactionPanel;
	private JComboBox textList;
	private JComboBox tuneList;
	private JPanel stanzaSelector;
	private JPanel stanzaCheckBoxPanel;

	/**
	 * Container for either loading message, sheet music, or error message
	 */
	private JPanel displayPanel;

	/**
	 * Loading message to be displayed while lilypond is generating sheet music.
	 */
	private JLabel loadingLabel;

	/**
	 * Container for the sheet music generated by the lilypond command
	 */
	private JScrollPane musicScrollPane;

	/**
	 * Sheet music generated by lilypond command (will contain an ImageIcon for
	 * the actual png file from lilypond)
	 */
	private JLabel musicLabel;

	/**
	 * Error message to be displayed for any db or lilypond issue.
	 */
	private JLabel errorLabel;

	public MusicPage(final Model model, final Chooser chooser) {
		super();
		this.model = model;

		// start rendering the sheet music while we finish setting up
		this.lw = new LilypondWrapper();
		// make sure that we are notified when the sheet music is ready
		lw.addObserver(this);

		// setup ComboBox for text and tune selections
		this.textList = new JComboBox();
		this.tuneList = new JComboBox();

		// setup actionListeners for text/tune selection changes
		textList.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ae) {
				if (!textList.getSelectedItem().equals(model.getText())) {
					model.setText((Text) textList.getSelectedItem());
				}
			}
		});
		tuneList.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ae) {
				if (!tuneList.getSelectedItem().equals(model.getTune())) {
					model.setTune((Tune) tuneList.getSelectedItem());
				}
			}
		});

		// setup new hymn button
		JButton newHymnButton = new JButton(NEW_HYMN_BUTTON_TEXT);
		newHymnButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				chooser.returnToChooser();
				MusicPage.this.setVisible(false);
			}
		});

		// setup button panel (includes text and tune drop downs)
		JPanel buttonPanel = new JPanel();
		buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.LINE_AXIS));
		buttonPanel.add(newHymnButton);
		buttonPanel.add(Box.createRigidArea(new Dimension(5, 0)));
		buttonPanel.add(new JSeparator(SwingConstants.VERTICAL));
		buttonPanel.add(Box.createRigidArea(new Dimension(5, 0)));
		buttonPanel.add(new JLabel("Text: "));
		buttonPanel.add(Box.createRigidArea(new Dimension(5, 0)));
		buttonPanel.add(textList);
		buttonPanel.add(Box.createRigidArea(new Dimension(5, 0)));
		buttonPanel.add(new JLabel("Tune: "));
		buttonPanel.add(Box.createRigidArea(new Dimension(5, 0)));
		buttonPanel.add(tuneList);

		// setup stanza selector
		stanzaSelector = new JPanel();
		stanzaSelector.setLayout(new BoxLayout(stanzaSelector,
				BoxLayout.LINE_AXIS));
		stanzaSelector.add(new JLabel("Select Stanzas:"));
		stanzaSelector.add(Box.createRigidArea(new Dimension(5, 0)));
		stanzaCheckBoxPanel = new JPanel();
		stanzaCheckBoxPanel.setLayout(new BoxLayout(stanzaCheckBoxPanel,
				BoxLayout.LINE_AXIS));
		stanzaSelector.add(stanzaCheckBoxPanel);
		stanzaSelector.add(Box.createHorizontalGlue());

		// setup interaction panel
		this.interactionPanel = new JPanel();
		interactionPanel.setLayout(new BoxLayout(interactionPanel,
				BoxLayout.PAGE_AXIS));
		interactionPanel.setBorder(BorderFactory
				.createEmptyBorder(5, 10, 5, 10));
		interactionPanel.add(buttonPanel);
		this.add(interactionPanel, BorderLayout.PAGE_START);

		// setup sheet music area
		this.displayPanel = new JPanel();
		displayPanel.setLayout(new GridLayout(0, 1));
		displayPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10));

		// setup loading label
		URL loadingGifURL = this.getClass().getResource("/" + LOADING_GIF_FILE);
		this.loadingLabel = new JLabel(new ImageIcon(loadingGifURL));
		loadingLabel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		loadingLabel.setOpaque(true);
		loadingLabel.setBackground(Color.WHITE);
		displayLoadingMessage();

		// setup music label. this will hold the rendered sheet music
		this.musicLabel = new JLabel();
		musicScrollPane = new JScrollPane(musicLabel);
		musicScrollPane.getVerticalScrollBar().setUnitIncrement(16);

		// setup error label
		this.errorLabel = new JLabel(ERROR_MESSAGE, SwingConstants.CENTER);
		errorLabel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		errorLabel.setOpaque(true);
		errorLabel.setBackground(Color.WHITE);

		this.add(displayPanel, BorderLayout.CENTER);

		this.setMinimumSize(getPreferredSize());
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.pack();
		this.setVisible(false);
	}

	/**
	 * Called to render this MusicPage with new selections
	 */
	public void render() {
		// update window title
		this.setTitle(model.getText().getName() + " : "
				+ model.getTune().getName());

		// setup checkboxes for stanzas (must be called before lilypond, b/c
		// it ensures that all stanzas are displayed)
		initializeStanzaCheckBoxes();

		// generate sheet music
		runLilypond();

		// setup Text/Tune selection boxes
		textList.setModel(new DefaultComboBoxModel(db.selectTextsFor(model
				.getTune())));
		tuneList.setModel(new DefaultComboBoxModel(db.selectTunesFor(model
				.getText())));
		setSelectedItems();

		this.setVisible(true);
	}

	/**
	 * Ensure that the textList and tuneList appear with the correct selections
	 */
	private void setSelectedItems() {
		for (int i = 0; i < textList.getItemCount(); i++) {
			if (textList.getItemAt(i).equals(model.getText())) {
				textList.setSelectedIndex(i);
				break;
			}
		}
		for (int i = 0; i < tuneList.getItemCount(); i++) {
			if (tuneList.getItemAt(i).equals(model.getTune())) {
				tuneList.setSelectedIndex(i);
				break;
			}
		}
	}

	private void displayErrorMessage() {
		displayPanel.removeAll();
		displayPanel.add(errorLabel);
		displayPanel.revalidate();
		displayPanel.repaint();
	}

	private void displayMusicScrollPane(URL url) {
		musicLabel.setIcon(new ImageIcon(Toolkit.getDefaultToolkit()
				.createImage(url)));
		musicLabel.repaint();
		displayPanel.removeAll();
		displayPanel.add(musicScrollPane);
		displayPanel.revalidate();
		displayPanel.repaint();
	}

	private void displayLoadingMessage() {
		displayPanel.removeAll();
		displayPanel.add(loadingLabel);
		displayPanel.revalidate();
		displayPanel.repaint();
	}

	private void runLilypond() {
		displayLoadingMessage();
		// prepare data for lilypond
		db.refreshMeters(model.getText(), model.getTune());
		lw.generateHymnPng(model.getText(), model.getTune());
	}

	private void initializeStanzaCheckBoxes() {
		interactionPanel.remove(stanzaSelector);
		int numStanzas = model.getText().getStanzas().size();
		if (numStanzas >= MIN_STANZAS_FOR_CHECKBOXES) {
			stanzaCheckBoxPanel.removeAll();
			Stanza[] stanzas = model.getText().getStanzas()
					.toArray(new Stanza[numStanzas]);
			for (int i = 1; i <= numStanzas; i++) {
				// setup checkbox
				JCheckBox stanzaBox = new JCheckBox("" + i, true);
				stanzaCheckBoxPanel.add(stanzaBox);
				stanzaBox.addItemListener(new StanzaBoxListener(i));
				stanzaCheckBoxPanel.add(Box
						.createRigidArea(new Dimension(5, 0)));

				// make sure Stanza is setup to display
				if (!stanzas[i - 1].isDisplayed())
					stanzas[i - 1].toggleDisplay();
			}
			interactionPanel.add(stanzaSelector);
			interactionPanel.revalidate();
			interactionPanel.repaint();
		}
	}

	private class StanzaBoxListener implements ItemListener {
		private int verseNum;

		public StanzaBoxListener(int verseNum) {
			this.verseNum = verseNum;
		}

		public void itemStateChanged(ItemEvent e) {
			model.getText().toggleStanzaDisplay(verseNum);
			runLilypond();
		}
	}

	public Dimension getPreferredSize() {
		return PREFERRED_SIZE;
	}

	/**
	 * Text or Tune selection change or rendered sheet music ready
	 */
	@Override
	public void update(Observable o, Object arg) {
		if (o instanceof Model && this.isVisible()) {
			render();
		} else if (o instanceof LilypondWrapper) {
			if (arg instanceof LilypondException) {
				((LilypondException) arg).printStackTrace();
				displayErrorMessage();
			} else if (arg instanceof URI) {
				// NOTE: this will hide the loading message
				try {
					if (new File((URI) arg).length() == 0L)
						displayErrorMessage();
					else
						displayMusicScrollPane(((URI) arg).toURL());
				} catch (MalformedURLException e) {
					e.printStackTrace();
					displayErrorMessage();
				}
			}
		}
	}
}
